#!/usr/bin/ruby

require File.join(File.dirname(__FILE__),"..","lib","groundwork.rb")

begin
  options = Groundwork::parse_options

  case options[:command]

    ##################################################
    ### Generate #####################################
    ##################################################
  when "generate"

    cmd_opts = Trollop::options(options[:remainder]) do
      banner <<-STR
Usage:
      groundwork generate [options] filename

Generates a basic .recipe.rb file, which you can modify, from the current directory

Options are:
STR
      opt :force, "Overwrite .recipe.rb file if exists", :default=>false
      opt :ignore, "Ignore files matching these filename patterns", :type=>:strings
      opt :print, "Instead of storing in a file, print the recipe to stdout", :default=>false
      opt :chdir, "Before running, cd to the given directory", :default=>FileUtils.pwd
    end

    recipe = ""
    FileUtils.cd(cmd_opts[:chdir]) do
      recipe = Groundwork::Recipe.generate FileUtils.pwd, :ignore => cmd_opts[:ignore]
    end

    if cmd_opts[:print]
      puts recipe
    else
      name = options[:remainder].shift || "Recipe"

      if File.exists?(name+".recipe.rb") && !cmd_opts[:force]
        raise RuntimeError.new("File already exists: #{name}.recipe.rb\nUse -f to overwrite")
      end

      File.open(name+".recipe.rb","w"){|f| f.print recipe}
    end

    ##################################################
    ### Compile ######################################
    ##################################################
  when "compile"

    cmd_opts = Trollop::options(options[:remainder]) do
      banner <<-STR
Usage:
      groundwork compile [options] filename.recipe.rb

Compiles a .recipe.rb, including all referenced files into it.

Options are:
STR
      opt :force, "Overwrite .recipe file if exists", :default=>false
      opt :print, "Instead of storing in a file, print the recipe to stdout", :default=>false
      opt :chdir, "Before running, cd to the given directory", :default=>FileUtils.pwd
    end

    input = options[:remainder].shift
    raise RuntimeError.new("Cannot open #{input}") if input && !File.exists?(input)

    compiled = ""
    FileUtils.cd(cmd_opts[:chdir]) do
      compiled = if input
                   Groundwork::Recipe.compile_file input
                 else
                   Groundwork::Recipe.compile STDIN.read, FileUtils.pwd
                 end
    end

    if cmd_opts[:print]
      puts compiled
    else
      name = options[:remainder].shift || if input
                                            File.basename(input,".recipe.rb")
                                          else
                                            File.basename(FileUtils.pwd)
                                          end

      if File.exists?(name+".recipe") && !cmd_opts[:force]
        raise RuntimeError.new("File already exists: #{name}.recipe\nUse -f to overwrite")
      end

      File.open(name+".recipe","w"){|f| f.print compiled}
    end

    ##################################################
    ### Install ######################################
    ##################################################
  when "install"

    cmd_opts = Trollop::options(options[:remainder]) do
      banner <<-STR
Usage:
      groundwork install [options] filename.recipe

Installs a recipe into ~/.groundwork

Options are:
STR
      opt :force, "Overwrite recipe if it already exists", :default=>false
      opt :name, "Specify a name for the recipe other than the filename", :default=>false
    end

    file = options[:remainder].shift
    raise RuntimeError.new("No input file given") unless file
    raise RuntimeError.new("Cannot open #{file}") unless File.exists?(file)

    dot_groundwork = File.expand_path("~/.groundwork")
    FileUtils.mkdir(dot_groundwork) unless File.directory?(dot_groundwork)

    if File.exists?(File.join(dot_groundwork,File.basename(file))) && !cmd_opts[:force]
      raise RuntimeError.new("Recipe already exists: #{File.basename(file,'.recipe')}\nUse -f to replace")
    end

    FileUtils.cp file, dot_groundwork
  else
  end
rescue
  puts $!.to_s
end
