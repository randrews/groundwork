h1. Groundwork

Groundwork generates project outlines. Often, there are a lot of boilerplate files you need to start a project; this helps you not only create those files, but make recipes to add new types of project.

h2. Basic use

Groundwork uses subcommands:

*@groundwork list@*

lists the known recipes, both built-in and ones you've installed

*@groundwork <recipe> <name>@*

Creates a directory called _name_ and runs the given recipe in it.

*@groundwork install <recipe_file>@*

Installs the given recipe file into ~/.groundwork

You can get help on Groundwork with *@groundwork -h@* and help for a specific command (including recipes) with *@groundwork <command> -h@*

h2. Making recipes

h3. The recipe DSL

A recipe is a script written in a Ruby DSL. It's pretty straightforward:

<pre>file "file1.txt", "File 1 contents"

directory "dir1" do
    file "file2.txt", :erb => "<%= 2 + 2 %>"
end</pre>

Most of the time you'll want to make it generate files from other files, instead of putting the contents inline. You can do so like this:

@file "filename", :from => "path/to/file"@

Or, to generate a file from an ERb template:

@file "filename", :from_erb => "path/to/file"@

h3. Compiling

If your recipe references external files, you should compile it like so:

*@groundwork compile <recipe_file>@*

This will include all the files your script reads from into the script itself, and make a self-contained file for installing.

h3. Generating

As a convenience, to easily make recipes, you can do

*@groundwork generate@*

which will make a basic recipe you can modify for the current directory.

h3. Options

Your recipes can take options from the command line. Groundwork uses Trollop for option parsing, so the syntax is like this:

<pre>options do
	opt :domain, "Domain name", :default => "geekfu.org"
end

if @domain_given
	file "domain.txt", :erb=> "The domain is <%= @domain %>"
end</pre>

Every script is guaranteed at least one argument: _name_, the name of the newly-created directory that we're building running the recipe in. This is the first remaining command-line parameter after options and flags are parsed out:

*@groundwork example-recipe -a --foo-mode -n 10 name@*

*@groundwork example-recipe name -x@*

In both cases, Trollop is intelligent enough to figure out that _name_ is the name, and the rest are options and flags described in @options@.